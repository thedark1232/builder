--edit /usr/lib/moveLibrary.lua
--установить в робота дополнительные библиотеки перед использованием этой:
--sizeLibrary
local move_lib = {}

local robot = require("robot")
local component = require("component")
local sizeLibrary = require("sizeLibrary")
local table_sides = {}

local navigate = component.navigation

--загрузить таблицу поворотов робота при загрузки библиотеки
do
	table_sides = sizeLibrary.build_pair_sizes()
end

--определить координаты робота.
--если у робота координаты ~= nil вернет false
--если робот находится не в пределах координат навигатора, то функция вернет true
function move_lib.check_navigate_component()
	local x,_,y = navigate.getPosition()
	if x == nil or y == nil then
		return true
	end
	return false
end

--двигает робота на позицию без выламывания блоков перед собой
function move_lib.moveOut(new_position_x, new_position_y, new_position_z)
local robot_position_x, robot_position_z, robot_position_y = navigate.getPosition()
if robot_position_x == nil then robot_position_x = 0 end
if robot_position_y == nil then robot_position_y = 0 end
	while robot_position_x ~= new_position_x do
   		if robot_position_x < new_position_x then
			table_sides[5][navigate.getFacing()]()
			robot.forward()
    		robot_position_x = navigate.getPosition()
   		elseif robot_position_x > new_position_x then
      		table_sides[4][navigate.getFacing()]()
            robot.forward()
			robot_position_x = navigate.getPosition()
  		end
	end
	while robot_position_y ~= new_position_y do
   		if robot_position_y < new_position_y then
      	  	table_sides[3][navigate.getFacing()]()
			robot.forward()
     		_,_,robot_position_y = navigate.getPosition()
   		elseif robot_position_y > new_position_y then
    		table_sides[2][navigate.getFacing()]()			
			robot.forward()
			_,_,robot_position_y = navigate.getPosition()
   		end
	end
	while robot_position_z ~= new_position_z do
		if robot_position_z < new_position_z then
			robot.up()
			_,robot_position_z,_ = navigate.getPosition()
		elseif robot_position_z > new_position_z then
			robot.down()
			_,robot_position_z,_ = navigate.getPosition()
		end
	end
end

--двигает робота на позицию с выламыванием блоков перед собой
function move_lib.swing_and_move(new_position_x, new_position_y, new_position_z)
local robot_position_x, robot_position_z, robot_position_y = navigate.getPosition()
if robot_position_x == nil then robot_position_x = 0 end
if robot_position_y == nil then robot_position_y = 0 end
	while robot_position_x ~= new_position_x do
   		if robot_position_x < new_position_x then
			table_sides[5][navigate.getFacing()]()
			robot.swing()
			robot.forward()
    		robot_position_x = navigate.getPosition()
   		elseif robot_position_x > new_position_x then
      		table_sides[4][navigate.getFacing()]()
			robot.swing()
            robot.forward()
			robot_position_x = navigate.getPosition()
  		end
	end
	while robot_position_y ~= new_position_y do
   		if robot_position_y < new_position_y then
      	  	table_sides[3][navigate.getFacing()]()
			robot.swing()
			robot.forward()
     		_,_,robot_position_y = navigate.getPosition()
   		elseif robot_position_y > new_position_y then
    		table_sides[2][navigate.getFacing()]()	
			robot.swing()
			robot.forward()
			_,_,robot_position_y = navigate.getPosition()
   		end
	end
	while robot_position_z ~= new_position_z do
		if robot_position_z < new_position_z then
			robot.swingUp()
			robot.up()
			_,robot_position_z,_ = navigate.getPosition()
		elseif robot_position_z > new_position_z then
			robot.swingDown()
			robot.down()
			_,robot_position_z,_ = navigate.getPosition()
		end
	end
end
--двигает робота жопой, если движение жопой невозможно, но развернется и попробует выломать блок
function move_lib.back_and_swing(new_position_x, new_position_y, new_position_z)
local robot_position_x, robot_position_z, robot_position_y = navigate.getPosition()
if robot_position_x == nil then robot_position_x = 0 end
if robot_position_y == nil then robot_position_y = 0 end
	while robot_position_x ~= new_position_x do
   		if robot_position_x < new_position_x then
			table_sides[4][navigate.getFacing()]()
			if robot.back() == nil then table_sides[5][navigate.getFacing()](); robot.swing() end
    		robot_position_x = navigate.getPosition()
   		elseif robot_position_x > new_position_x then
      		table_sides[5][navigate.getFacing()]()
			if robot.back() == nil then table_sides[4][navigate.getFacing()](); robot.swing() end
			robot_position_x = navigate.getPosition()
  		end
	end
	while robot_position_y ~= new_position_y do
   		if robot_position_y < new_position_y then
      	  	table_sides[2][navigate.getFacing()]()
			if robot.back() == nil then table_sides[3][navigate.getFacing()](); robot.swing() end
     		_,_,robot_position_y = navigate.getPosition()
   		elseif robot_position_y > new_position_y then
    		table_sides[3][navigate.getFacing()]()	
			if robot.back() == nil then table_sides[2][navigate.getFacing()](); robot.swing() end
			_,_,robot_position_y = navigate.getPosition()
   		end
	end
	while robot_position_z ~= new_position_z do
		if robot_position_z < new_position_z then
			robot.swingUp()
			robot.up()
			_,robot_position_z,_ = navigate.getPosition()
		elseif robot_position_z > new_position_z then
			robot.swingDown()
			robot.down()
			_,robot_position_z,_ = navigate.getPosition()
		end
	end
end
--двигает робота по Z координате
function move_lib.z_move(new_position_z)
	local robot_position_x, robot_position_z, robot_position_y = navigate.getPosition()
	while robot_position_z ~= new_position_z do
		if robot_position_z < new_position_z then
			robot.up()
			_,robot_position_z,_ = navigate.getPosition()
		elseif robot_position_z > new_position_z then
			robot.down()
			_,robot_position_z,_ = navigate.getPosition()
		end
	end
end

--двигает робота по Х,У координатам
function move_lib.x_y_move(new_position_x, new_position_y)
local robot_position_x, robot_position_z, robot_position_y = navigate.getPosition()
	while robot_position_x ~= new_position_x do
   		if robot_position_x < new_position_x then
			table_sides[5][navigate.getFacing()]()
			robot.forward()
    		robot_position_x = navigate.getPosition()
   		elseif robot_position_x > new_position_x then
      		table_sides[4][navigate.getFacing()]()
            robot.forward()
			robot_position_x = navigate.getPosition()
  		end
	end
	while robot_position_y ~= new_position_y do
   		if robot_position_y < new_position_y then
      	  	table_sides[3][navigate.getFacing()]()
			robot.forward()
     		_,_,robot_position_y = navigate.getPosition()
   		elseif robot_position_y > new_position_y then
    		table_sides[2][navigate.getFacing()]()			
			robot.forward()
			_,_,robot_position_y = navigate.getPosition()
   		end
	end
end
--двигает робота по Х,У координатам с уничтожение блоков(последний аргумент true = дополнительно уничтожать блоки над собой)
function move_lib.x_y_swing(new_position_x, new_position_y, up_blocks)
local robot_position_x, robot_position_z, robot_position_y = navigate.getPosition()
	while robot_position_x ~= new_position_x do
   		if robot_position_x < new_position_x then
			table_sides[5][navigate.getFacing()]()
			robot.swing()
			if up_blocks then robot.swingUp() end
			robot.forward()
    		robot_position_x = navigate.getPosition()
   		elseif robot_position_x > new_position_x then
      		table_sides[4][navigate.getFacing()]()
			robot.swing()
			if up_blocks then robot.swingUp() end
            robot.forward()
			robot_position_x = navigate.getPosition()
  		end
	end
	while robot_position_y ~= new_position_y do
   		if robot_position_y < new_position_y then
      	  	table_sides[3][navigate.getFacing()]()
			robot.swing()
			if up_blocks then robot.swingUp() end
			robot.forward()
     		_,_,robot_position_y = navigate.getPosition()
   		elseif robot_position_y > new_position_y then
    		table_sides[2][navigate.getFacing()]()			
			robot.swing()
			if up_blocks then robot.swingUp() end
			robot.forward()
			_,_,robot_position_y = navigate.getPosition()
   		end
	end
end
return move_lib
